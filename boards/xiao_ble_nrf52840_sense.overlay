&pinctrl {
	i2c0_default: i2c0_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 4)>, <NRF_PSEL(TWIM_SCL, 0, 5)>;
			bias-disable;
		};
	};

	i2c0_sleep: i2c0_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 0, 4)>, <NRF_PSEL(TWIM_SCL, 0, 5)>;
			bias-disable;
			low-power-enable;
		};
	};

	pwm1_default: pwm1_default {
		group1 {
			psels = <NRF_PIN_DISCONNECTED>;
		};
	};

	pwm1_sleep: pwm1_sleep {
		group1 {
			psels = <NRF_PIN_DISCONNECTED>;
			low-power-enable;
		};
	};
};

/ {
	pwmleds {
		compatible = "pwm-leds";
		pwm_led0: pwm_led_0 {
			pwms = <&pwm0 0 PWM_MSEC(1) PWM_POLARITY_INVERTED>;
		};
	};

	lsm6ds3tr-c-en {
		startup-delay-us = <0>;
	};

	buttons {
		compatible = "gpio-keys";
		button0: button_0 {
			gpios = <&gpio0 2 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
			label = "Push button switch 0";
		};
	};

	aliases {
		// sw0 = &button0; // Uncomment to Enable SW0
	};

	battery-divider {
        compatible = "voltage-divider";
        status = "okay";
        io-channels = <&adc 7>;
        output-ohms = <510000>;
        full-ohms = <(1000000+510000)>;
        power-gpios = <&gpio0 14 (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)>;
	};

	zephyr,user {
		int0-gpios = <&gpio0 3 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
		led-gpios = <&gpio0 17 (GPIO_OPEN_DRAIN|GPIO_ACTIVE_LOW)>;
		// clk-gpios = <&gpio0 28 GPIO_OPEN_DRAIN>; // Uncomment and set to correct pin if using an external clock (crystal oscillator)
	};

};

&i2c0 {
	compatible = "nordic,nrf-twim";
	zephyr,concat-buf-size = <255>; // probable max for nrf52832
	zephyr,flash-buf-max-size = <255>; // probable max for nrf52832
	clock-frequency = <I2C_BITRATE_FAST>;
	pinctrl-0 = <&i2c0_default>;
	pinctrl-1 = <&i2c0_sleep>;

	imu: imu@0 { // any address out of range (00, 7f, etc. will search all addresses and stored address first if available, specify an address here to search first otherwise
		compatible = "i2c-device";
		label = "imu";
		reg = <0>;
	};

};

&cryptocell {
	status = "disabled";
};

&nfct {
	status = "disabled";
};
